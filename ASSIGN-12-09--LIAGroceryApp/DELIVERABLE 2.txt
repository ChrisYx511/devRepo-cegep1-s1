/*
    (Chris) Xi Yang
    Mehdi Farshid Farzad
    Introduction to Programming
    25 November 2023

    -- LIA Deliverable 2 --
 */

// ------------ Main.java ------------ //
/*
TODO: Consistent Spacing between menu items
 */
public class Main {
    static ProductStores session = new ProductStores();

    public static void main(String[] args) {
        // Initialize ProductStores
        // TEMPORARY - Test Items
        session.addInventoryItem(new Product("Test", 20.00, 5));
        session.addInventoryItem(new Product("Test1", 20.00, 5));
        session.availableInventory.remove(0);
        session.addInventoryItem(new Product("Test2", 20.00, 5));
        // Render the main menu //
        Menu mainMenu = new Menu(MenuItems.menuTitle("Main Menu"), "Welcome to xyz shopping software!", MenuItems.listOfOptions(new String[]{
                "Add / Remove Items",
                "Buy Items",
                "View Cart & Checkout",
                "Exit"
        }));
        // Add the menu actions to the main menu, in order of the list.
        // Notice the use of lambda functions, passed to MenuAction as method MenuAction.action()
        mainMenu.menuActions.add(() -> ProductManagement.openMgmtMenu(session));
        mainMenu.menuActions.add(() -> ProductPurchase.openBuyPage(session));
        mainMenu.menuActions.add(() -> ProductPurchase.openCartPage(session));
        // Draw and handle the actions of the main menu
        mainMenu.handleMenuOption(4);

    }
}

// ------------ Menu.java ------------ //

import java.util.ArrayList;
import java.util.Scanner;

/**
 * Class to handle any given menu, creating the different pages of the application
 */
public class Menu {
    // 3 main components of each page
    String titleString;
    String body;
    String options;
    /** Constructor to create new menu, <code>options</code> is optional
     * @param titleString title of the menu
     * @param body body of the menu
     * @param options options of the menu, in <code>String</code> form
     * */
    Menu(String titleString, String body, String options) {
        this.titleString = titleString;
        this.body = body;
        this.options = options;
    }
    /** Constructor to create new menu, <code>options</code> is optional
     * @param titleString title of the menu
     * @param body body of the menu
     * */
    Menu(String titleString, String body) {
        this.titleString = titleString;
        this.body = body;
    }

    /**
     * Functional interface allowing methods to store methods as a MenuAction.action();
     */
    @FunctionalInterface
    public interface MenuAction {
        void action();
    }
    /**
     * Functional interface allowing methods to store methods as a RefreshAction.action();
     */
    @FunctionalInterface
    public interface RefreshAction {
        void action();
    }

    /**
     * List of MenuAction interfaces, containing methods that can be executed later
     */
    public ArrayList<MenuAction> menuActions = new ArrayList<>();

    /**
     * Draw Menu using System.out.println()
     */
    public void draw() {
        System.out.println(this.titleString);
        System.out.println(this.body);
        System.out.println(this.options);
    }

    /**
     * Draws the menu and accept user inputted action, executing the action associated
     * with the number.
     * @param maxMenuOption the max integer that the user can input to make a choice, <code>maxMenuOption</code>
     *                      must always be the exit option. Note that menu options count from 1.
     */
    public void handleMenuOption(int maxMenuOption) {
        // Declare scanner and user menu option
        final Scanner in = new Scanner(System.in);
        int mainMenuSelection = 1;
        while (mainMenuSelection != maxMenuOption) {
            // Draw menu and options
            this.draw();
            System.out.print("Option: ");
            // Accept user input mainMenuSelection
            mainMenuSelection = in.nextInt();
            in.nextLine();
            // Check if menu options are valid
            if (mainMenuSelection > maxMenuOption || mainMenuSelection <= 0) {
                System.out.println("Invalid input");
                continue;
            } else if (mainMenuSelection == maxMenuOption) {
                continue;
            }
            // Execute the MenuAction corresponding with the user choice
            menuActions.get(mainMenuSelection - 1).action();
        }
    }

    /**
     * Draws the menu and accept user inputted action, executing the action associated
     * with the number AND refreshing the body on every iteration.
     * @param maxMenuOption the max integer that the user can input to make a choice, <code>maxMenuOption</code>
     *                      must always be the exit option. Note that menu options count from 1.
     * @param refresh the action associated with the refresh, usually updating <code>this.body</code>
     */
    public void handleMenuOption(int maxMenuOption, RefreshAction refresh) {
        // Declare scanner and user menu option
        final Scanner in = new Scanner(System.in);
        int mainMenuSelection = 1;
        while (mainMenuSelection != maxMenuOption) {
            refresh.action();
            // Draw menu and options
            this.draw();
            System.out.print("Option: ");
            // Accept user input mainMenuSelection
            mainMenuSelection = in.nextInt();
            in.nextLine();
            // Check if menu options are valid
            if (mainMenuSelection > maxMenuOption || mainMenuSelection <= 0) {
                System.out.println("Invalid input");
                continue;
            } else if (mainMenuSelection == maxMenuOption) {
                continue;
            }
            // Execute the MenuAction corresponding with the user choice
            menuActions.get(mainMenuSelection - 1).action();
        }
    }

}

// ------------ MenuItems.java ------------ //

import java.util.ArrayList;
/** Reusable Text Elements that can be used throughout the application's menus */
public class MenuItems {
    /**
     * Return a formatted title
     * @param title title of the menu
     * @return formatted text
     */
    public static String menuTitle(String title) {
        return "------  " + title + "  ------";
    }

    /**
     * Create a list of menu options from a String[]
     * @param options <code>String[]</code> list of menu options
     * @return String containing each option on a separate line, with the number in front
     */
    public static String listOfOptions(String[] options) {
        StringBuilder optionStrings = new StringBuilder();
        for (int i = 0; i < options.length; i++) {
            optionStrings.append(i + 1).append("- ").append(options[i]).append('\n');
        }
        return optionStrings.toString();
    }

    /**
     * Create a table of products, used in many menu pages
     * @param listOfProducts list of products to be displayed
     * @param useInventory display as Qty or as Inv (remaining inventory)
     * @return String containing a formatted table of products
     */
    public static String productList(ArrayList<Product> listOfProducts, boolean useInventory) {
        StringBuilder returnString;
        // Change display if it's an inventory vs. a cart
        if (useInventory) {
            returnString = new StringBuilder("""
                -- LIST OF ITEMS --
                Index   Name                Inv     Price ($)
                """);
        } else {
            returnString = new StringBuilder("""
                -- LIST OF ITEMS --
                Index   Name                Qty     Price ($)
                """);
        }

        // Create lines to add to the table, padding the strings to be properly formatted with spaces
        for (int i = 0; i < listOfProducts.size(); i++) {
            StringBuilder productNameExpanded = new StringBuilder(listOfProducts.get(i).productName);
            // Product name should be 20 characters
            if (productNameExpanded.length() < 20) {
                productNameExpanded.append(" ".repeat(Math.max(0, 20 - listOfProducts.get(i).productName.length())));
            } else {
                productNameExpanded = new StringBuilder(productNameExpanded.substring(0, 20));
            }
            // Index should be 8 characters
            String indexString = Integer.toString(i);
            indexString += (" ".repeat(Math.max(0, 8 - Integer.toString(i).length())));
            // Append all content as a row of the table
            returnString.append(indexString).append(productNameExpanded).append(listOfProducts.get(i).productQty).append("       ").append(listOfProducts.get(i).getFormattedPrice());
            returnString.append('\n');
        }
        // Return the string
        return returnString.toString();
    }

    public enum Colors {
        BLACK,
        RED,
        GREEN,
        YELLOW,
        BLUE,
        PURPLE,
        CYAN
    }

    public static String returnColorString(String str, Colors clr, boolean highlight) {
        int highlightDigit = 3;
        if (highlight) {
            highlightDigit = 4;
        }
        switch (clr) {
            case RED -> {return "\u001B["+ highlightDigit +"1m" + str + "\u001B[0m";}
            case BLACK -> {return "\u001B[" + highlightDigit + "0m" + str + "\u001B[0m";}
            case GREEN -> {return "\u001B[" + highlightDigit + "2m" + str + "\u001B[0m";}
            case YELLOW -> {return "\u001B[" + highlightDigit + "3m" + str + "\u001B[0m";}
            case BLUE -> {return "\u001B[" + highlightDigit + "4m" + str + "\u001B[0m";}
            case PURPLE -> {return "\u001B[" + highlightDigit + "5m" + str + "\u001B[0m";}
            case CYAN -> {return "\u001B[" + highlightDigit + "6m" + str + "\u001B[0m";}
        }
        throw new RuntimeException("INVALID COLOR");
    }

}

// ------------ Product.java ------------ //

import java.text.DecimalFormat;
/** Defines the basic layout of an item in the store */
public class Product {
    //Key properties
    String productName;
    double productPrice;
    int productQty;
    // ID used to map between different lists
    int productID;
    // Initializing a product
    Product(String name, double price, int qty) {
        this.productName = name;
        this.productPrice = price;
        this.productQty = qty;
    }
    Product(String name, double price, int qty, int id) {
        this.productName = name;
        this.productPrice = price;
        this.productQty = qty;
        this.productID = id;
    }

    /**
     * Return price always with 2 decimal positions
     * @return <code>String</code> containing the price formatted to 2 decimals
     */
    public String getFormattedPrice() {
        final DecimalFormat formatter = new DecimalFormat("#0.00");
        return formatter.format(this.productPrice);
    }
}

// ------------ ProductManagement.java ------------ //

import java.util.Scanner;

/** Used to add/remove inventory to the store */
public class ProductManagement {
    static Scanner in = new Scanner(System.in);
    /**
     * Open menu Add/Remove Products
     * @param currentSession the ProductStore currently used so method can get cart and inventory
     */
    public static void openMgmtMenu(ProductStores currentSession) {
        Menu mgmtPage = new Menu(MenuItems.menuTitle("Manage Inventory"), MenuItems.productList(currentSession.availableInventory, true),
                MenuItems.listOfOptions(new String[]{
                        "Add an item to inventory",
                        "Remove an item from inventory",
                        "Edit qty of item in inventory",
                        "Exit Product Management page"
                })
        );
        mgmtPage.menuActions.add(() -> ProductManagement.addProduct(currentSession));
        mgmtPage.menuActions.add(() -> ProductManagement.removeProduct(currentSession));
        mgmtPage.menuActions.add(() -> ProductManagement.editInv(currentSession));
        mgmtPage.handleMenuOption(4, () -> mgmtPage.body = MenuItems.productList(currentSession.availableInventory, true));

    }

    /**
     * Add a product to the inventory
     * @param currentSession the ProductStore currently used so method can get cart and inventory
     */
    public static void addProduct(ProductStores currentSession) {
        //TODO: IMPLEMENT ProductManagement.addProduct(), last method (mostly)
    }

    /**
     * Remove a product from the inventory, also removes it from user cart and reset product IDs for inventory and cart
     * @param currentSession the ProductStore currently used so method can get cart and inventory
     */
    public static void removeProduct(ProductStores currentSession) {
        System.out.print("Select index of item to remove from inventory: ");
        int itemIndex = in.nextInt();
        in.nextLine();
        if (itemIndex > currentSession.availableInventory.size() - 1|| itemIndex < 0) {
            System.out.println("\n" + MenuItems.returnColorString("Invalid Selection!", MenuItems.Colors.YELLOW, false));
            return;
        }
        System.out.print("Are you sure (y/n)?");
        String confirm = in.nextLine();
        if (!confirm.equalsIgnoreCase( "y")) {
            System.out.println("\n" + MenuItems.returnColorString("Aborted.", MenuItems.Colors.RED, false));
            return;
        }
        currentSession.availableInventory.remove(itemIndex);

    }

    /**
     * Select a product and edit the inventory information
     * @param currentSession the ProductStore currently used so method can get cart and inventory
     */
    public static void editInv(ProductStores currentSession) {
        System.out.print("Select index of item to edit from inventory: ");
        int itemIndex = in.nextInt();
        in.nextLine();
        if (itemIndex > currentSession.availableInventory.size() - 1 || itemIndex < 0) {
            System.out.println("\n" + MenuItems.returnColorString("Invalid Selection!", MenuItems.Colors.YELLOW, false));
            return;
        }
        Product selectedProduct = currentSession.availableInventory.get(itemIndex);
        System.out.print("Add or Remove inventory? (A/R) ");
        String addOrRemoveStr = in.nextLine();
        if (addOrRemoveStr.equalsIgnoreCase("A")) {
            System.out.print("Enter the amount to add to inventory: ");
            int addQty = in.nextInt();
            in.nextLine();
            selectedProduct.productQty += addQty;
            System.out.println("\n" + MenuItems.returnColorString("Item Updated!", MenuItems.Colors.GREEN, false));
        } else if (addOrRemoveStr.equalsIgnoreCase("R")) {
            System.out.print("Enter the amount to remove from inventory: ");
            int removeQty = in.nextInt();
            in.nextLine();
            if (selectedProduct.productQty - removeQty < 0) {
                System.out.println("\n" + MenuItems.returnColorString("Invalid QTY!", MenuItems.Colors.YELLOW, false));
            } else if (selectedProduct.productQty - removeQty == 0) {
                currentSession.availableInventory.remove(itemIndex);
                System.out.println("\n" + MenuItems.returnColorString("Successfully Removed!", MenuItems.Colors.GREEN, false));

            } else {
                selectedProduct.productQty -= removeQty;
                System.out.println("\n" + MenuItems.returnColorString("Item Updated!", MenuItems.Colors.GREEN, false));
            }
        } else {
            System.out.println("\n" + MenuItems.returnColorString("Invalid Selection!\n", MenuItems.Colors.YELLOW, false));
        }
    }
}

// ------------ ProductPurchase.java ------------ //

import java.util.ArrayList;
import java.util.Scanner;

/** Manages Buying, Show Cart, and Purchase Functions
 */
public class ProductPurchase {
    final static Scanner in = new Scanner(System.in);
    /**
     * Open the page to buy items, get user options and run <code>addItemToCart</code>
     * @param currentSession the ProductStore currently used so method can get cart and inventory
     */
    public static void openBuyPage(ProductStores currentSession){
        Menu buyPage = new Menu(MenuItems.menuTitle("Purchase Items"), MenuItems.productList(currentSession.availableInventory, true),
                    MenuItems.listOfOptions(new String[] {
                            "Add an item to cart",
                            "Exit Purchase Items page"
                    })
                );
        buyPage.menuActions.add(() -> ProductPurchase.addItemToCart(currentSession));
        buyPage.handleMenuOption(2);
    }

    /**
     * Add a selected index to cart from the inventory
     * @param currentSession the ProductStore currently used so method can get cart and inventory
     */
    public static void addItemToCart(ProductStores currentSession) {
        System.out.print("Select an item: ");
        // this will accept the user choice
        int chosenIndex = in.nextInt();
        in.nextLine();
        System.out.print("How many: ");
        // how many the user adds to the cart
        int qty = in.nextInt();
        in.nextLine();
        if (chosenIndex > currentSession.availableInventory.size() - 1) {
            System.out.println("Invalid Selection!");
            return;
        }
        Product selectedProduct = currentSession.availableInventory.get(chosenIndex);
        // Place the selected product in a variable
        if (currentSession.productIsInCart(selectedProduct.productID)) {
            if (qty + ProductStores.getProductFromID(selectedProduct.productID, currentSession.cart).productQty > selectedProduct.productQty) {
                System.out.println(MenuItems.returnColorString("Not enough product to fulfill request, try again (" + qty + " selected, " + ProductStores.getProductFromID(selectedProduct.productID, currentSession.cart).productQty + " already in cart)", MenuItems.Colors.YELLOW, true));
                return;
            }
            currentSession.updateCartQty(selectedProduct.productID, qty, true);
        } else {
            if (qty > selectedProduct.productQty) {
                System.out.println(MenuItems.returnColorString("Not enough product to fulfill request, try again", MenuItems.Colors.YELLOW, true));
                return;
            }
            Product p = new Product(selectedProduct.productName, selectedProduct.productPrice, qty, selectedProduct.productID);
            currentSession.cart.add(p);
        }

    }

    /**
     * Remove an item from the cart
     * @param currentSession the ProductStore currently used so method can get cart and inventory
     */
    public static void removeItemFromCart(ProductStores currentSession) {
        System.out.print("Select index of item to remove from cart: ");
        int itemIndex = in.nextInt();
        in.nextLine();
        if (itemIndex > currentSession.cart.size() - 1|| itemIndex < 0) {
            System.out.println("\n" + MenuItems.returnColorString("Invalid Selection!", MenuItems.Colors.YELLOW, false));
            return;
        }
        System.out.print("Are you sure (y/n)?");
        String confirm = in.nextLine();
        if (!confirm.equalsIgnoreCase( "y")) {
            System.out.println("\n" + MenuItems.returnColorString("Aborted.", MenuItems.Colors.RED, false));
            return;
        }
        currentSession.cart.remove(itemIndex);
    }

    /**
     * Open the cart menu page
     * @param currentSession the ProductStore currently used so method can get cart and inventory
     */
    public static void openCartPage(ProductStores currentSession) {
        Menu cartPage = new Menu(MenuItems.menuTitle("Cart"), MenuItems.productList(currentSession.cart, false), MenuItems.listOfOptions(new String[]{
                "Remove Item from Cart",
                "Edit qty of item",
                "Checkout",
                "Exit cart",
        }));
        cartPage.menuActions.add(() -> removeItemFromCart(currentSession));
        cartPage.menuActions.add(() -> editCartQty(currentSession));
        cartPage.menuActions.add(() -> processPurchase(currentSession));
        cartPage.handleMenuOption(4, () -> cartPage.body = MenuItems.productList(currentSession.cart, false));
    }

    /**
     * Process the purchase and clear the cart, remove corresponding inventory quantities
     * @param currentSession the ProductStore currently used so method can get cart and inventory
     */
    public static void processPurchase(ProductStores currentSession) {
        ArrayList<Product> toRemove = new ArrayList<>();
        for (Product p : currentSession.cart) {
            try {
                Product invProd = ProductStores.getProductFromID(p.productID, currentSession.availableInventory);
                if (invProd.productQty - p.productQty < 0) {
                    System.out.println(MenuItems.returnColorString("Error: Invalid Cart Qty on Product " + p.productName, MenuItems.Colors.RED, false));
                    continue;
                }
                if (invProd.productQty - p.productQty == 0) {
                    currentSession.availableInventory.remove(invProd);
                }
                invProd.productQty -= p.productQty;
                toRemove.add(p);
            } catch (RuntimeException err) {
                System.out.println("Product " + p.productName + " is no longer available, skipping");
                toRemove.add(p);
            }
        }
        currentSession.cart.removeAll(toRemove);
        System.out.println("Thank you!");
    }

    /**
     * Edit the qty of an item in the cart
     * @param currentSession the ProductStore currently used so method can get cart and inventory
     */
    public static void editCartQty(ProductStores currentSession) {
        //TODO : Possibly add qty from cart
        System.out.print("Select index of item to edit from cart: ");
        int itemIndex = in.nextInt();
        in.nextLine();
        if (itemIndex > currentSession.cart.size() - 1 || itemIndex < 0) {
            System.out.println("\n" + MenuItems.returnColorString("Invalid Selection!", MenuItems.Colors.YELLOW, false));
            return;
        }
        Product selectedProduct = currentSession.cart.get(itemIndex);
        System.out.print("Enter the amount to remove from cart: ");
        int removeQty = in.nextInt();
        in.nextLine();
        if (selectedProduct.productQty - removeQty < 0) {
            System.out.println("\n" + MenuItems.returnColorString("Invalid QTY!", MenuItems.Colors.YELLOW, false));
        } else if (selectedProduct.productQty - removeQty == 0) {
            currentSession.cart.remove(itemIndex);
            System.out.println("\n" + MenuItems.returnColorString("Successfully Removed!", MenuItems.Colors.GREEN, false));

        } else {
            selectedProduct.productQty -= removeQty;
            System.out.println("\n" + MenuItems.returnColorString("Item Updated!", MenuItems.Colors.GREEN, false));
        }


    }

}

// ------------ ProductStores.java ------------ //

import java.util.ArrayList;

/**
 * Class containing basic data structures and methods used to store products for the session, Storage for the Products
 */
public class ProductStores {
    /** Inventory <code>ArrayList</code>*/
    ArrayList<Product> availableInventory = new ArrayList<>();
    /** Cart <code>ArrayList</code>*/
    ArrayList<Product> cart = new ArrayList<>();
    /**
     * Product IDs
     */
    int nextProductID = 0;
    /**
     * Get a product from a given ID, return NULL if nothing is found
     * @param id <code>productID</code> of the product
     * @param arrayOfProducts <code>ArrayList</code>
     * @return <code>Product</code> if found, <code>null</code> if not found
     */
    // This will allow one to associate products in the cart with the products in inventory
    public static Product getProductFromID(int id, ArrayList<Product> arrayOfProducts) {
        for (Product product : arrayOfProducts) {
            if (product.productID == id) {
                return product;
            }
        }
        throw new RuntimeException("Product not in provided ArrayList");
    }

    public boolean productIsInCart(int id) {
        for (Product product : cart) {
            if (product.productID == id) {
                return true;
            }
        }
        return false;
    }

    public void updateCartQty(int id, int addRemoveQty, boolean isAdd) {
        Product product = ProductStores.getProductFromID(id, cart);
        if (isAdd) {
            product.productQty += addRemoveQty;
            return;
        }
        if (product.productQty - addRemoveQty < 0) {
            throw new RuntimeException("updateCartQty FAILED: QTY CANNOT BE SMALLER THAN 0");
        }
        product.productQty -= addRemoveQty;
    }

    /**
     * Add to inventory store, mapping the productID to the index of the inventory array
     * @param itemToAdd <code>Product</code> to add
     */
    public void addInventoryItem(Product itemToAdd) {
        itemToAdd.productID = nextProductID;
        availableInventory.add(itemToAdd);
        nextProductID++;
    }

}
